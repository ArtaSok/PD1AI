import random

import tkinter as tk
import tkinter.ttk as ttk

from tkinter import messagebox

class Main:
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("700x300")
        self.root.title("Nim Game")
        
        self.piles = [1,3,5,7]
              
        # Galvenā loga izveide
        self.mainFrame = tk.LabelFrame(self.root, width=700-10, height=300-5, text="Nim")
        self.mainFrame.place(x=5, y=0)
        
        self.start()
        
    def start(self):
        self.mainFrame.destroy()
        self.mainFrame = tk.LabelFrame(self.root, width=700-10, height=300-5, text="Nim")
        self.mainFrame.place(x=5, y=0)
        self.mainFrame.grid_propagate(False)
        
        tk.Label(self.mainFrame, text="Who starts the game ?").grid(row=0, column=0, columnspan=2, padx=300, pady=(70, 30))
        
        self.userButton = ttk.Button(self.mainFrame, text="User", command=lambda: self.startGame(True))
        self.userButton.grid(row=1, column=0)
        
        self.computerButton = ttk.Button(self.mainFrame, text="Computer", command=lambda: self.startGame(False))
        self.computerButton.grid(row=1, column=1)
        
    def startGame(self, player_turn):
        self.player_turn = player_turn
        self.gameScreen()
        
    def gameScreen(self):
        self.mainFrame.destroy()
        self.mainFrame = tk.LabelFrame(self.root, width=700-10, height=300-5, text="Nim")
        self.mainFrame.place(x=5, y=0)
        self.mainFrame.grid_propagate(False)
        
        self.boardText = self.print_board()
        self.boardLabel = tk.Label(self.mainFrame, text=self.boardText, justify=tk.LEFT)
        self.boardLabel.grid(row=0, column=0, columnspan=2)
        
        self.computerLabel = tk.Label(self.mainFrame, text="")
        self.computerLabel.grid(row=0, column=2, padx=(40, 0))
        
        self.pileEntry = tk.StringVar()
        self.stonesEntry = tk.StringVar()
        
        self.pileLabel = tk.Label(self.mainFrame, text="Choose a pile (1, 2, 3, 4)")
        self.stonesLabel = tk.Label(self.mainFrame, text="Choose the number of stones to remove: ")
        
        self.pileEntryShow = tk.Entry(self.mainFrame, textvariable=self.pileEntry)
        self.stonesEntryShow = tk.Entry(self.mainFrame, textvariable=self.stonesEntry)
        
        self.pileLabel.grid(row=1, column=0, pady=(50, 5), padx=(100, 5)) 
        self.pileEntryShow.grid(row=1, column=1, pady=(50, 5))
        
        self.stonesLabel.grid(row=2, column=0, padx=(50, 5))
        self.stonesEntryShow.grid(row=2, column=1)          
        
        self.makeMoveButton = ttk.Button(self.mainFrame, text="Make Move", command=self.userMove)
        self.makeMoveButton.grid(row=3, column=0, columnspan=2)     
        
        if not self.player_turn:
            self.player_turn = not self.player_turn
            self.piles[0] = 0
            self.boardLabel["text"] = self.print_board()      
            self.computerLabel["text"] = "Computer chose to remove 1 stone from pile 1"
   
    # Turpināt spēli vai iziet
    def playAgain(self):
        result = messagebox.askquestion("Continue?", "Do you want to play again?")
        
        if result == "yes":
            self.piles = [1,3,5,7]
            self.start()
        else:
            quit()

    # Spēlētāja gājiens 
    def userMove(self):      
        try:
            pile = int(self.pileEntry.get())-1
            stones = int(self.stonesEntry.get())

        # Tiek izmesta kļūda nepareizas vērtības ievadīšanas gadījumā    
        except ValueError:
            messagebox.showerror("Invalid Input!", "Invalid pile choice or number of stones, try again.")
            return
        
        # Pārbauda spēlētāja ievadi
        if pile < 0 or pile >= len(self.piles) or self.piles[pile] == 0:
            messagebox.showerror("Invalid Input!", "Invalid pile choice, try again.")
            return
        if stones < 1 or stones > self.piles[pile]:
            messagebox.showerror("Invalid Input!", "Invalid number of stones, try again.")
            return
        
        self.piles[int(self.pileEntry.get())-1] -= int(self.stonesEntry.get())
        self.boardLabel["text"] = self.print_board()
        
        # Tiek izvadīts teksts, ka spēlētājs ir zaudējis datoram
        if sum(self.piles) == 0:
            messagebox.showinfo("You Lost!", "Better luck next time")
            self.playAgain()
            return
        
        # Ļauj datoram veikt savu gājienu
        best_move = None
        best_value = float('-inf')

        for i in range(len(self.piles)):
            if self.piles[i] > 0:
                new_piles = self.piles.copy()
                new_piles[i] -= 1
                move_value = self.minimax(new_piles, False)

                if move_value > best_value:
                    best_value = move_value
                    best_move = i

        self.piles[best_move] -= 1
        self.boardLabel["text"] = self.print_board()
        self.computerLabel["text"] = f"Computer chose to remove 1 stone from pile {best_move + 1}"
        
        # Tiek izvadīts teksts, ka spēlētājs uzvar
        if sum(self.piles) == 0:
            messagebox.showinfo("You Won!", "Congratulations!")
            self.playAgain()
            return
        
   # Tiek implementēts Maksimizācijas algoritms
    def minimax(self, piles, maximizing):
        if sum(piles) == 0:
            return 1 if maximizing else -1

        if maximizing:
            max_eval = float('-inf')
            for i in range(len(piles)):
                if piles[i] > 0:
                    new_piles = piles.copy()
                    new_piles[i] -= 1
                    eval = self.minimax(new_piles, False)
                    max_eval = max(max_eval, eval)
            return max_eval
        else:
            min_eval = float('inf')
            for i in range(len(piles)):
                if piles[i] > 0:
                    new_piles = piles.copy()
                    new_piles[i] -= 1
                    eval = self.minimax(new_piles, True)
                    min_eval = min(min_eval, eval)
            return min_eval    
        
    # Izprintē esošo spēles laukumu
    def print_board(self):
        finalStr = ""
        for idx, pile in enumerate(self.piles):
           finalStr += f"Pile {idx + 1}: {'⬤' * pile}"
           finalStr += "\n"
        finalStr = finalStr[:-1]
        return finalStr
                
    def run(self):
        self.root.mainloop()


main = Main()
main.run()
